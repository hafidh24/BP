 state = {
        rate: 1,
        volume: 1,
        muted: false,
        resizeMode: 'contain',
        duration: 0.0,
        currentTime: 0.0,
        paused: true,
      };
  
      onLoad = (data) => {
        this.setState({ duration: data.duration });
      };
    
      onProgress = (data) => {
        this.setState({ currentTime: data.currentTime });
      };
    
      onEnd = () => {
        this.setState({ paused: true })
        this.video.seek(0)
      };
    
      onAudioBecomingNoisy = () => {
        this.setState({ paused: true })
      };
    
    
      getCurrentTimePercentage() {
        if (this.state.currentTime > 0) {
          return parseFloat(this.state.currentTime) / parseFloat(this.state.duration);
        }
        return 0;
      };
    
      renderRateControl(rate) {
        const isSelected = (this.state.rate === rate);
    
        return (
          <TouchableOpacity onPress={() => { this.setState({ rate }) }}>
            <Text style={[styles.controlOption, { fontWeight: isSelected ? 'bold' : 'normal' }]}>
              {rate}x
            </Text>
          </TouchableOpacity>
        );
      }
    
      renderResizeModeControl(resizeMode) {
        const isSelected = (this.state.resizeMode === resizeMode);
    
        return (
          <TouchableOpacity onPress={() => { this.setState({ resizeMode }) }}>
            <Text style={[styles.controlOption, { fontWeight: isSelected ? 'bold' : 'normal' }]}>
              {resizeMode}
            </Text>
          </TouchableOpacity>
        )
      }
    
      renderVolumeControl(volume) {
        const isSelected = (this.state.volume === volume);
    
        return (
          <TouchableOpacity onPress={() => { this.setState({ volume }) }}>
            <Text style={[styles.controlOption, { fontWeight: isSelected ? 'bold' : 'normal' }]}>
              {volume * 100}%
            </Text>
          </TouchableOpacity>
        )
      }
    
      render() {
        const flexCompleted = this.getCurrentTimePercentage() * 100;
        const flexRemaining = (1 - this.getCurrentTimePercentage()) * 100;
    
        return (
          <View style={styles.container}>
            <TouchableOpacity
              style={styles.fullScreen}
              onPress={() => this.setState({ paused: !this.state.paused })}
            >
              <Video
                ref={(ref: Video) => { this.video = ref }}
                /* For ExoPlayer */
                /* source={{ uri: 'http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=51AF5F39AB0CEC3E5497CD9C900EBFEAECCCB5C7.8506521BFC350652163895D4C26DEE124209AA9E&key=ik0', type: 'mpd' }} */
                source={{uri:'https://youtu.be/rVLKY9F4MEE?list=RDGMEMhCgTQvcskbGUxqI4Sn2QYw.mp4'}}
                style={styles.fullScreen}
                rate={this.state.rate}
                paused={this.state.paused}
                volume={this.state.volume}
                muted={this.state.muted}
                resizeMode={this.state.resizeMode}
                onLoad={this.onLoad}
                onProgress={this.onProgress}
                onEnd={this.onEnd}
                onAudioBecomingNoisy={this.onAudioBecomingNoisy}
                onAudioFocusChanged={this.onAudioFocusChanged}
                repeat={false}
              />
            </TouchableOpacity>
    
            <View style={styles.controls}>
              <View style={styles.generalControls}>
                <View style={styles.rateControl}>
                  {this.renderRateControl(0.25)}
                  {this.renderRateControl(0.5)}
                  {this.renderRateControl(1.0)}
                  {this.renderRateControl(1.5)}
                  {this.renderRateControl(2.0)}
                </View>
    
                <View style={styles.volumeControl}>
                  {this.renderVolumeControl(0.5)}
                  {this.renderVolumeControl(1)}
                  {this.renderVolumeControl(1.5)}
                </View>
    
                <View style={styles.resizeModeControl}>
                  {this.renderResizeModeControl('cover')}
                  {this.renderResizeModeControl('contain')}
                  {this.renderResizeModeControl('stretch')}
                </View>
              </View>
    
              <View style={styles.trackingControls}>
                <View style={styles.progress}>
                  <View style={[styles.innerProgressCompleted, { flex: flexCompleted }]} />
                  <View style={[styles.innerProgressRemaining, { flex: flexRemaining }]} />
                </View>
              </View>
            </View>
          </View>
        );
      }
    }
    
    
    const styles = StyleSheet.create({
      container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'black',
      },
      fullScreen: {
        position: 'absolute',
        top: 0,
        left: 0,
        bottom: 0,
        right: 0,
      },
      controls: {
        backgroundColor: 'transparent',
        borderRadius: 5,
        position: 'absolute',
        bottom: 20,
        left: 20,
        right: 20,
      },
      progress: {
        flex: 1,
        flexDirection: 'row',
        borderRadius: 3,
        overflow: 'hidden',
      },
      innerProgressCompleted: {
        height: 20,
        backgroundColor: '#cccccc',
      },
      innerProgressRemaining: {
        height: 20,
        backgroundColor: '#2C2C2C',
      },
      generalControls: {
        flex: 1,
        flexDirection: 'row',
        borderRadius: 4,
        overflow: 'hidden',
        paddingBottom: 10,
      },
      rateControl: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center',
      },
      volumeControl: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center',
      },
      resizeModeControl: {
        flex: 1,
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
      },
      controlOption: {
        alignSelf: 'center',
        fontSize: 11,
        color: 'white',
        paddingLeft: 2,
        paddingRight: 2,
        lineHeight: 12,
      },
    });


    <TouchableOpacity
                            onPress={() => this.setState({ paused: !this.state.paused })}>
                            <Video
                                source={r6}
                                // source={{uri: "background"}}// Can be a URL or a local file.
                                ref={(ref: Video) => { this.video = ref }}
                                paused={this.state.paused}
                                // rate={this.state.rate}
                                // volume={this.state.volume}
                                // muted={this.state.muted}
                                // resizeMode={this.state.resizeMode}
                                onBuffer={this.onBuffer}
                                onError={this.videoError}
                                style={style.container}
                                repeat={false}
                            />
                        </TouchableOpacity>


<CheckBox style={{ paddingLeft: 50 }}
disabled={false}
placeholder='Sakit'
value={this.state.Sakit}
onPress={() => this.setState({ Sakit: !this.state.Sakit })}
onValueChange={(newValue) => this.setState({ Sakit: newValue }, () => {
  console.log(this.state.Sakit);
})}
></CheckBox>
<Text>Musibah</Text>
<CheckBox
disabled={false}
placeholder='Musibah'
value={this.state.Musibah}
onPress={() => this.setState({ Musibah: !this.state.Musibah })}
onValueChange={(newValue) => this.setState({ Musibah: newValue }, () => {
  console.log(this.state.Musibah);
})}
></CheckBox>

<RadioForm
radio_props={this.state.Histori}
onPress={(value) => { ToastAndroid.show(value.toString(), ToastAndroid.SHORT) }}
initial={2}
buttonSize={10}
buttonOuterSize={20}
animation={true}
formHorizontal={true}
>
</RadioForm>


import { Text, View, StyleSheet, TextInput, Image, ScrollView, SafeAreaView, TouchableOpacity, ToastAndroid } from 'react-native'
import { Picker } from '@react-native-picker/picker';
import React, { Component } from 'react'

class index extends Component {
    constructor(props) {
        super(props)
        this.state = {
          count: 1,
          tr: [],
          rap: '',
          img1: null,
          img2: 0,
          text: '',
          text1: '',
          text2: '',
          show: 0,
          pel: '',
          peltinggi: '',
          pelrendah: '',
          Ganjil: false,
          Genap: false,
          kelas: '',
        }
      }
    
      render() {
        const inputbutton = [];
        for (let i = 0; i < this.state.count; i++) {
          <><View key={i}>
            <Text>{i + 1}.</Text>
            <Picker style={style.Textinputcss}
              selectedValue={this.state.rap}
              value={this.state.tr[i]}
              onValueChange={(itemValue) => this.setState({ rap: itemValue, show: 1 })}
            >
              <Picker.Item label="Pilih" value="" />
              <Picker.Item label="SD/MI" value="SD/MI" />
              <Picker.Item label="SMP/MTS" value="SMP/MTS" />
              <Picker.Item label="SMA/SMK/MA" value="SMA/SMK/MA" />
            </Picker>
          </View></>
        }
        return (
          <ScrollView contentContainer style={style.contentContainer} showsVerticalScrollIndicator={true}>
              <SafeAreaView >
                <View style={{ backgroundColor: '#0EBEDF' }}>
                  <Text style={style.title1}>Tambah Rapot </Text>
                </View>
                <>
                  <View>
    
                    {inputbutton}
                    <View>
                      <Text style={style.Label2}>Tingkat</Text>
                      <Picker style={style.Textinputcss}
                        selectedValue={this.state.rap}
                        onValueChange={(itemValue) => this.setState({ rap: itemValue, show: 1 })}
                      >
                        <Picker.Item label="Pilih" value="" />
                        <Picker.Item label="SD/MI" value="SD/MI" />
                        <Picker.Item label="SMP/MTS" value="SMP/MTS" />
                        <Picker.Item label="SMA/SMK/MA" value="SMA/SMK/MA" />
                      </Picker>
                    </View>
    
                    {this.state.show === 1 && this.state.rap === 'SD/MI' ?
                      <View>
                        <Text style={style.Label2}>Kelas</Text>
                        <Picker style={style.Textinputcss}
                          selectedValue={this.state.kelas}
                          onValueChange={(itemValue) => this.setState({ kelas: itemValue, show: 1 })}
                        >
                          <Picker.Item label="Pilih" value="" />
                          <Picker.Item label="I" value="I" />
                          <Picker.Item label="II" value="II" />
                          <Picker.Item label="III" value="III" />
                          <Picker.Item label="IV" value="IV" />
                          <Picker.Item label="V" value="V" />
                          <Picker.Item label="VI" value="VI" />
                        </Picker>
                      </View>
                      :
                      this.state.show === 1 && this.state.rap === "SMP/MTS" ?
                        <View>
                          <Text style={style.Label2}>Kelas</Text>
                          <Picker style={style.Textinputcss}
                            selectedValue={this.state.kelas}
                            onValueChange={(itemValue) => this.setState({ kelas: itemValue, show: 1 })}
                          >
                            <Picker.Item label="Pilih" value="" />
                            <Picker.Item label="VII" value="VII" />
                            <Picker.Item label="VIII" value="VIII" />
                            <Picker.Item label="IX" value="XI" />
    
                          </Picker>
                        </View>
                        :
                        this.state.show === 1 && this.state.rap === 'SMA/SMK/MA' ?
                          <View>
                            <Text style={style.Label2}>Tingkat</Text>
                            <Picker style={style.Textinputcss}
                              selectedValue={this.state.kelas}
                              onValueChange={(itemValue) => this.setState({ kelas: itemValue, show: 1 })}
                            >
                              <Picker.Item label="Pilih" value="" />
                              <Picker.Item label="X" value="X" />
                              <Picker.Item label="XI" value="XI" />
                              <Picker.Item label="XII" value="XII" />
                            </Picker>
                          </View>
                          :
                          <></>}
    
    
    
                    <Text style={style.Label2}>Nilai Tertinggi</Text>
                    <View style={style.colnilai}>
                      <Picker style={style.nilai}
                        selectedValue={this.state.peltinggi}
                        onValueChange={(itemValue) => this.setState({ peltinggi: itemValue, show: 1 })}
                      >
                        <Picker.Item label="Pilih Mata Pelajaran" value="" />
                        <Picker.Item label="Bahasa Indonesia" value="Bahasa Indonesia" />
                        <Picker.Item label="Matematika" value="Matematika" />
                        <Picker.Item label="IPA" value="IPA" />
                        <Picker.Item label="IPS" value="IPS" />
                        <Picker.Item label="Bahasa Inggris" value="Bahasa Inggris" />
                        <Picker.Item label="Kimia" value="Kimia" />
                        <Picker.Item label="Fisika" value="Fisika" />
                        <Picker.Item label="Biologi" value="Biologi" />
                        <Picker.Item label="Lain-lain" value="Lain-lain" />
                      </Picker>
                      <TextInput
                        style={style.kotak3}
                        onChangeText={text => this.setState({ text })}
                        value={this.state.text}
                        keyboardType="numeric"
                        placeholder="Nilai"
                        placeholderTextColor='#7e7e7e'
                      />
                    </View>
                    <Text style={style.Label2}>Nilai Terendah</Text>
                    <View style={style.colnilai}>
                      <Picker style={style.nilai}
                        selectedValue={this.state.pelrendah}
                        onValueChange={(itemValue) => this.setState({ pelrendah: itemValue, show: 1 })}
                      >
                        <Picker.Item label="Pilih Mata Pelajaran" value="" />
                        <Picker.Item label="Bahasa Indonesia" value="Bahasa Indonesia" />
                        <Picker.Item label="Matematika" value="Matematika" />
                        <Picker.Item label="IPA" value="IPA" />
                        <Picker.Item label="IPS" value="IPS" />
                        <Picker.Item label="Bahasa Inggris" value="Bahasa Inggris" />
                        <Picker.Item label="Kimia" value="Kimia" />
                        <Picker.Item label="Fisika" value="Fisika" />
                        <Picker.Item label="Biologi" value="Biologi" />
                        <Picker.Item label="Lain-lain" value="Lain-lain" />
                      </Picker>
                      <TextInput
                        style={style.kotak3}
                        onChangeText={text1 => this.setState({ text1 })}
                        value={this.state.text1}
                        keyboardType="numeric"
                        placeholder="Nilai"
                        placeholderTextColor='#7e7e7e'
                      />
                    </View>

                  </View>
                  <View style={{ flexDirection: 'row', justifyContent: 'center' }}>
                    {/* <TouchableOpacity onPress={() => this.props.navigation.navigate('Anak_Binaan', ToastAndroid.show('Data Telah Disimpan', ToastAndroid.SHORT))}
                      style={style.btnSimpanDark} >
                      <Text style={{ color: 'white', fontWeight: 'bold' }}>Kirim</Text>
                    </TouchableOpacity> */}
                  </View>
                </>
              </SafeAreaView>
          </ScrollView >
    
        )
      }
    }

    const style = StyleSheet.create({
      contentContainer: {
        flex: 1,
      },
      colnilai: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center'
      },
      Label1: {
        flex: 1,
        fontSize: 12,
        padding: 5,
        color: '#000000',
        flexDirection: 'column',
      },
      Textinputcss: {
        color: '#7e7e7e',
        marginLeft: 30,
        marginRight: 10,
        borderRadius: 10,
        borderWidth: 1,
        fontSize: 12,
        height: 52,
        backgroundColor: '#fff',
        shadowColor: "#333",
        shadowOffset: {
          width: 1,
          height: 1,
        },
        shadowOpacity: 0.3,
        shadowRadius: 2,
        borderColor: '#7e7e7e',
        elevation: 3,
      },
      nilai: {
        color: '#7e7e7e',
        fontSize: 12,
        height: 35,
        width: '60%',
        backgroundColor: '#fff',
        shadowColor: "#333",
        shadowOffset: {
          width: 1,
          height: 1,
        },
        shadowOpacity: 0.3,
        shadowRadius: 2,
        borderColor: '#7e7e7e',
        elevation: 3,
      },
      Label2: {
        marginTop: 5,
        marginLeft: 25,
        padding: 5,
        width: '100%',
        color: '#000',
        alignItems: 'center',
        justifyContent: 'center'
      },
      Label3: {
        marginTop: 5,
        marginBottom: -25,
        marginLeft: 25,
        padding: 5,
        width: '100%',
        color: '#000',
        alignItems: 'center',
        justifyContent: 'center'
      },
      kotak2: {
        color: '#000000',
        marginTop: 10,
        marginLeft: 30,
        marginRight: 10,
        borderRadius: 2,
        borderWidth: 0.1,
        fontSize: 12,
        height: 52,
        width: '15%',
        backgroundColor: '#7e7e7',
      },
      kotak3: {
        color: '#000000',
        marginTop: 10,
        marginLeft: 30,
        marginRight: 10,
        borderRadius: 2,
        borderWidth: 0.1,
        fontSize: 12,
        height: 52,
        width: '15%',
        textAlign: 'center',
        backgroundColor: '#fff',
      },
      title1: {
        marginRight: 20,
        marginLeft: 20,
        marginTop: 15,
        marginBottom: 15,
        fontSize: 18,
        fontWeight: 'bold',
        color: '#fff',
      },
      item: {
        flex: 1,
        fontSize: 16,
        flexDirection: 'row',
        backgroundColor: '#fff',
        padding: 17,
        marginVertical: 8,
        marginHorizontal: 16,
        shadowColor: "#333",
        shadowOffset: {
          width: 1,
          height: 1,
        },
        shadowOpacity: 0.3,
        shadowRadius: 2,
        borderColor: '#7e7e7e',
        elevation: 3,
      },
      container: {
        marginTop: 40,
        marginLeft: 75,
        multiline: true,
        width: 250,
        height: 250,
        flex: 1,
        margin: 20,
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: '#fff',
        shadowColor: "#333",
        shadowOffset: {
          width: 1,
          height: 1,
        },
        shadowOpacity: 0.3,
        shadowRadius: 2,
        borderColor: '#7e7e7e',
        elevation: 3,
      },
      btnSimpanDark: {
        width: '40%',
        fontWeight: 'bold',
        backgroundColor: '#87cefa',
        borderRadius: 10,
        padding: 10,
        borderWidth: 1,
        borderColor: '#E9E9E9',
        textAlign: 'center',
        justifyContent: 'center', alignItems: 'center'
      },
      btnSimpanUn: {
        width: '40%',
        fontWeight: 'bold',
        backgroundColor: '#C6C6C6',
        borderRadius: 10,
        padding: 10,
        borderWidth: 1,
        borderColor: '#E9E9E9',
        justifyContent: 'center', alignItems: 'center',
        textAlign: 'center',
      },
      checkbox: {
        flexDirection: 'row',
        alignContent: 'space-between',
        alignItems: 'center',
        marginLeft: 30,
        margin: 20,
      },
      btnSimpanUn1: {
        width: '40%',
        fontWeight: 'bold',
        backgroundColor: '#C6C6C6',
        borderRadius: 10,
        padding: 10,
        borderWidth: 1,
        borderColor: '#E9E9E9',
        justifyContent: 'center', alignItems: 'center',
        alignContent: 'center',
        textAlign: 'center',
      },
      btnEye: {
        position: 'absolute',
        padding: 10,
        right: 0
      },
    })

export default index