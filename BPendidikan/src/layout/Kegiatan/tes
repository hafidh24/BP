import { Pressable, ListItem, Modal, Video, ToastAndroid, Alert, ScrollView, Text, View, StyleSheet, TextInput, TouchableOpacity, Image, FlatList, RefreshControl, BackHandler, Dimensions, ListView, Button } from 'react-native'
import { Picker } from '@react-native-picker/picker';
import React, { Component } from 'react'
import { Selector } from "react-native-flatlist-selector";
import ImagePicker from 'react-native-image-crop-picker';
import { SafeAreaView } from 'react-native-safe-area-context'
import Icon from 'react-native-vector-icons/FontAwesome';


const width = Dimensions.get('window').width;
const openCamera = () => {
  const [imageCamera, setImageCamera] = useState(null)
  const option = {
    mediaType: 'photo',
    quality: 1
  }
}

export class Kegiatan extends Component {
  constructor(props) {
    super(props)
    this.state = {
      image: {
        name: '',
        type: '',
        uri: '',
        id: 1,
      },
      count: 1,
      Camera: '',
      nama: '',
      text: '',
      email: '',
      alamat: '',
      dosa: [],
      selectedValue: '',
      show: 0,
      index: 0,
      Kegiatan: [],
      id_kegiatan: '',
      nama_kegiatan: '',
      keg: '',
      filelist: [],
      resourcePath: {},
      image: [],
      images: [],
      foto: [],
      del: [],
      materi: [],
      list: '',
      visible: false,
      setVisible: false,
      isVisible: false,
      selected: 0,
      selectedIndex: 0,
    }
  }
  getIndex = (selectedIndex) => {
    this.setState({ selectedIndex: selectedIndex })
  }
  displayModal(show) {
    this.setState({ isVisible: show })
  }
  lauchImageLibrary = () => {
    let options = {
      storageOptions: {
        skipBackup: false,
        path: 'images',
      },
    };
    ImagePicker.showImage(options, (response) => {
      if (response.didCancel) {
        console.log('User cancelled image picker');
      } else if (response.error) {
        console.log('ImagePicker Error: ', response.error);
      } else if (response.customButton) {
        console.log('User tapped custom button: ', response.customButton);
        alert(response.customButton);
      } else {
        const source = { uri: response.uri };

        this.setState({ fileUri: source });
      }
    });
  }

  takePic() {
    {
      ImagePicker.launchCamera(
        {
          noData: true,
          saveToPhotos: true,
          title: 'Select Photo',
          maxWidth: 300,
          maxHeight: 400,
          compressImageQuality: 0.5,
          storageOptions: {
            skipBackup: false,
            path: 'images',
          },
        },
        (response) => {
          console.log('Response = ', response);

          if (response.didCancel) {
            console.log('User cancelled image picker');
          } else if (response.error) {
            console.log('ImagePicker Error: ', response.error);
          } else {
            const source = {
              uri: response.assets[0].uri,
              name: response.assets[0].fileName,
              type: response.assets[0].type,
              id: 0,
            };
            console.log('ini gambar = ', source);
            this.setState({
              image: source,
            });
            console.log('ini gambar = ', this.state.image);
          }
        },
      );
    }
  }

  handleBackButton = () => {
    if (this.props.navigation.isFocused()) {
      Alert.alert(
        'Keluar',
        'Anda yakin akan keluar ?', [{
          text: 'TIDAK',
          onPress: () => ToastAndroid.show("Batal Keluar", ToastAndroid.SHORT)
        }, {
          text: 'YA',
          onPress: () => BackHandler.exitApp()
        },], {
        cancelable: true
      }
      )
      return true
    } else {
      return this.state.canBeClosed = false
    }
  };

  componentDidMount() {
    BackHandler.addEventListener('hardwareBackPress', this.handleBackButton);
    // this.getProfile();
    // this.tokenCheck();
    this.GetDataAPi();
    this.getmateriAPi();
    console.log(this.props);
  }


  componentWillUnmount() {
    this.mounted = false;
    BackHandler.removeEventListener('hardwareBackPress', this.handleBackButton);
  }

  onRefresh() {
    this.tokenCheck();
  }

  GetDataAPi() {
    fetch('https://berbagipendidikan.org/sim/api/Kegiatan/getkegiatan').then(res => {
      if (res.status === 200)
        return res.json()
    }).then(resdata => {
      console.log(resdata.DATA)
      this.setState({
        Kegiatan: resdata.DATA
      })
    })
  }
  getmateriAPi() {
    fetch('https://berbagipendidikan.org/sim/api/materi/getmateri').then(res => {
      if (res.status === 200)
        return res.json()
    }).then(resdata => {
      console.log(resdata.DATA)
      this.setState({
        materi: resdata.DATA
      })
    })
  }

  Update() {
    this.Kegiatan();
  }


  cleanupImages() {
    let image =
      this.state.image ||
      (this.state.images && this.state.images.length
        ? this.state.images[0]
        : null);
    console.log('will cleanup image', image);

    ImagePicker.cleanSingle(image ? image.uri : null)
      .then(() => {
        console.log(`removed tmp image ${image.uri} from tmp directory`);
        this.setState({
          images: [],
        });
      })
      .catch((e) => {
        alert(e);
      });
  }

  cleansingleImage(index) {
    let helperArray = this.state.image;
    helperArray.splice(index, 1);
    this.setState({ images: helperArray });
  }
  cropLast() {
    if (!this.state.image) {
      return Alert.alert(
        'No image',
        'Before open cropping only, please select image'
      );
    }

    ImagePicker.openCropper({
      path: this.state.image.uri,
      width: 200,
      height: 200,
    })
      .then((image) => {
        console.log('received cropped image', image);
        this.setState({
          image: {
            uri: image.path,
            width: image.width,
            height: image.height,
            mime: image.mime,
          },
          images: null,
        });
      })
      .catch((e) => {
        console.log(e);
        Alert.alert(e.message ? e.message : e);
      });
  }
  pickSingleWithCamera(cropping, mediaType = 'photo') {
    ImagePicker.openCamera({
      cropping: cropping,
      width: 250,
      height: 250,
      multiple: true,
      includeExif: true,
      mediaType,
    })
      .then((image) => {
        console.log('received image', image);
        this.setState({
          image: {
            uri: image.path,
            width: image.width,
            height: image.height,
            mime: image.mime,
          },
          images: [],
        });
      })
      .catch((e) => alert(e));
  }
  pickSingle(cropit, circular = false, mediaType) {
    ImagePicker.openPicker({
      width: 500,
      height: 500,
      cropping: cropit,
      cropperCircleOverlay: circular,
      sortOrder: 'none',
      compressImageMaxWidth: 1000,
      compressImageMaxHeight: 1000,
      compressImageQuality: 1,
      compressVideoPreset: 'MediumQuality',
      includeExif: true,
      cropperStatusBarColor: 'white',
      cropperToolbarColor: 'white',
      cropperActiveWidgetColor: 'white',
      cropperToolbarWidgetColor: '#3498DB',
      multiple: true,
    })
      .then((image) => {
        console.log('received image', image);
        this.setState({
          image: {
            uri: image.path,
            width: image.width,
            height: image.height,
            mime: image.mime,
          },
          images: [],
        });
      })
      .catch((e) => {
        console.log(e);
        Alert.alert(e.message ? e.message : e);
      });
  }

  pickMultiple() {
    ImagePicker.openPicker({
      multiple: true,
      waitAnimationEnd: false,
      sortOrder: 'desc',
      includeExif: true,
      forceJpg: true,
    })
      .then((images) => {
        this.setState({
          image: null,
          images: images.map((i) => {
            console.log('received image', i);
            return {
              uri: i.path,
              width: i.width,
              height: i.height,
              mime: i.mime,
            };
          }),
        });
      })
      .catch((e) => alert(e));
  }

  scaledHeight(oldW, oldH, newW) {
    return (oldH / oldW) * newW;
  }

  renderVideo(video) {
    console.log('rendering video');
    return (
      <View style={{ height: 150, width: 150 }}>
        <Video
          source={{ uri: video.uri, type: video.mime }}
          style={{ position: 'absolute', top: 0, left: 0, bottom: 0, right: 0 }}
          rate={1}
          paused={false}
          volume={1}
          muted={false}
          resizeMode={'cover'}
          onError={(e) => console.log(e)}
          onLoad={(load) => console.log(load)}
          repeat={true}
        />
      </View>
    );
  }
  renderImage(image) {
    return (
      <Image
        style={{ width: 200, height: 200, resizeMode: 'contain' }}
        source={image}
      />
    );
  }

  renderAsset(image) {
    if (image.mime && image.mime.toLowerCase().indexOf('video/') !== -1) {
      return this.renderVideo(image);
    }

    return this.renderImage(image);
  }

  render() {
    //  const inputfoto = [];
    //  for (let i = 0; foto < i ; i++) {
    //      setState(prevState => prevState + 1);
    //   }
    //   inputfoto.push(
    //     <View key={i}>
    //         <View style={style.container}>
    //                         <Text>{i + 1}.</Text>
    //                           {this.state.image ? this.renderAsset(this.state.image) : null}
    //                         </View>
    //       </View>  
    //   )}

    const renderItem = ({ item, index }) => (
      <item id={item.id_level_anak_binaan}
        id_materi={item.id_materi}
        pelajaran={item.mata_pelajaran}
        nama={item.nama_materi} />
    );
    return (
      <ScrollView contentContainer style={style.contentContainer} showsVerticalScrollIndicator={true}>
        <SafeAreaView >
          <View style={{ backgroundColor: '#0EBEDF' }}>
            <Text style={style.title}>Tambah Kegiatan Anak Binaan</Text>
          </View>
          <Text style={style.Label}>Jenis Kegiatan</Text>
          <Picker style={style.Textinputcss} mode="dropdown"
            selectedValue={this.state.keg}
            onValueChange={(itemValue) => {
              this.setState({
                keg: itemValue
              })
            }}>
            <Picker.Item style={{ fontSize: 12 }} label={'Pilih Unit Kerja'} value={'0'} key={'0'} />
            {
              this.state.Kegiatan.map((keg) =>
                <Picker.Item style={{ height: '100%', width: '100%', fontSize: 12, }} label={keg.nama_kegiatan.toString()} value={keg.nama_kegiatan.toString()} key={keg.id_kegiatan.toString()} />
              )}
          </Picker>

          <Text style={style.Label}>Nama Aktivitas</Text>
          <TextInput
            style={style.kotak2}
            onChangeText={text => this.setState({ text })}
            value={this.state.text}
            placeholder="Nama Aktivitas"
            placeholderTextColor='#7e7e7e'
          />
          <View style={style.container}>
            <ScrollView horizontal={true}>
              <>
                {this.state.image ? this.renderAsset(this.state.image) : null}
                {/* {inputfoto} */}
                {this.state.images ? this.state.images.map((i) => (
                  <View key={i.uri}>{this.renderAsset(i)}</View>)) : null}
              </>
            </ScrollView>
            
          </View>


          <View style={style.containerSafe}>
            <Modal
              animationType={"slide"}
              transparent={false}
              visible={this.state.isVisible}
              onRequestClose={() => {
                Alert.alert('Modal has now been closed.');
              }}>
              <View style={style.containermodal}>
                <TouchableOpacity
                  onPress={this.pickMultiple.bind(this)}
                  style={style.tmbl2}
                >
                  <Text style={style.text}>Pilih Foto</Text>
                </TouchableOpacity>

                <TouchableOpacity
                  onPress={() => this.pickSingleWithCamera(true)}
                  style={style.tmbl2}
                >
                  <Text style={style.text}>
                    Pilih Masukan Foto
                  </Text>
                </TouchableOpacity>
                
                <Text
                  style={style.tmbl3}
                  onPress={() => {
                    this.displayModal(!this.state.isVisible);
                  }}>Kembali</Text>
              </View>
            </Modal>
            <TouchableOpacity
                  onPress={this.cleanupImages.bind(this)}
                  style={style.tmbl}
                >
                  <Text style={style.text}>Hapus Semua Gambar</Text>
                </TouchableOpacity>
          </View>
          <TouchableOpacity
            style={style.tmbl2}
            onPress={() => {
              this.displayModal(true);
            }}>
            <Text style={style.text}>Pilih Foto</Text>
          </TouchableOpacity>

          <Text style={{ fontSize: 30, textAlign: "center", marginTop: 20, fontWeight: 'bold', textDecorationLine: 'underline' }}>
            List pelajaran
          </Text>
            <FlatList
              data={this.state.materi}
              // keyExtractor={(item, index) => index.toString()}
              renderItem={({ item }) => (<TouchableOpacity>
                <Text style={style.item}>
                {item.mata_pelajaran}:
                {item.nama_materi}
                {/* {item.id_level_anak_binaan}
                {item.id_materi} */}
              </Text>
              </TouchableOpacity>
              )}>
              ListEmptyComponent={() =>
                <View style={{ width: 300, justifyContent: 'center', alignItems: 'center' }}>
                  <Text style={{ fontSize: 12, color: '#ffffff', justifyContent: 'center', alignItems: 'center' }}>{this.state.text2}</Text>
                </View>
              }
            </FlatList>
         
        </SafeAreaView>
      </ScrollView >


    )

  }
}

  {/* <TouchableOpacity><Text style={style.item}>
                                  {item.mata_pelajaran}
                                  {item.id_level_anak_binaan}
                                  {item.id_materi}
                                  {item.nama_materi}
                                </Text>
                                </TouchableOpacity> */}
  {/* //  <Button onPress={this.mybuttonclick} title="Ceklis"/> */}




  {/* <TouchableOpacity
          onPress={this.cleanupSingleImage.bind(this)}
          style={style.button}
        >
          <Text style={style.text}>Cleanup Single Image</Text>
        </TouchableOpacity>


           <View style={style.container1}>
                        <TouchableOpacity
                            onPress={() => this.pickSingleWithCamera(true)}
                            style={style.tmbl}
                             >
                          <Text style={style.text}>
                            Pilih Masukan Foto
                          </Text>
                            </TouchableOpacity>
                          
                            <TouchableOpacity 
                            onPress={this.pickMultiple.bind(this)}
                            style={style.tmbl}
                            >
                            <Text style={style.text}>Pilih Foto</Text>
                            </TouchableOpacity>
                            
                            <TouchableOpacity
                          onPress={this.deleteRule.bind(this)}
                          style={style.tmbl}
                        >
                          <Text style={style.text}>Hapus Semua Gambar</Text>
                        </TouchableOpacity>
                        <TouchableOpacity
                          onPress={this.cleanupSingleImage()}
                          style={style.tmbl}
                        >
                          <Text style={style.text}>Hapus Gambar</Text>
                        </TouchableOpacity>
                       
                          <View style={style.container2}>
                          <TouchableOpacity onPress={() => console.log('Berhasil di simpan')} style={style.tmbl}>
                          <Text style={style.text}>Simpan</Text>
                          </TouchableOpacity>
                          </View>
                        </View> */}





  export default Kegiatan

  const style = StyleSheet.create({
    contentContainer: {
    flex: 1,
  backgroundColor: '#fff',
  },
  closeText: {
    fontSize: 24,
  color: '#00479e',
  textAlign: 'center',
  },
  containerLaporanPesan: {
    paddingTop: 5,
  marginHorizontal: 10,
  backgroundColor: 'white',
  // flexDirection: 'row',
  borderRadius: 20,
  height: 280,
  shadowColor: "#333",
  shadowOffset: {
    width: 1,
  height: 1,
    },
  shadowOpacity: 0.3,
  shadowRadius: 2,
  elevation: 3,
  alignItems: 'center'
  },
  containerSafe: {
    flex: 1,
  alignContent: 'center',
  justifyContent: 'center',
  flexDirection: 'column',
  },
  containermodal: {
    flex: 0,
    // shadowColor: "#333",
    // shadowOffset: {
    //   width: 1,
    //   height: 1,
    // },
    // shadowOpacity: 0.3,
    // shadowRadius: 2,
    // borderColor: '#7e7e7e',
    // elevation: 3,
    marginTop: 200,
  marginBottom: 400,


  },
  dropdown: {
    position: 'absolute',
  backgroundColor: '#fff',
  width: '100%',
  shadowColor: '#000000',
  shadowRadius: 4,
  shadowOffset: {height: 4, width: 0 },
  shadowOpacity: 0.5,
  },
  item: {
    backgroundColor: '#fff',
  padding: 20,
  marginVertical: 8,
  marginHorizontal: 16,
  shadowColor: "#333",
  shadowOffset: {
    width: 1,
  height: 1,
    },
  shadowOpacity: 0.3,
  shadowRadius: 2,
  borderColor: '#7e7e7e',
  elevation: 3,
  },
  container: {
    marginLeft: 75,
  width: 250,
  height: 250,
  flex: 1,
  margin: 20,
  alignItems: 'center',
  justifyContent: 'center',
  backgroundColor: '#fff',
  shadowColor: "#333",
  shadowOffset: {
    width: 1,
  height: 1,
    },
  shadowOpacity: 0.3,
  shadowRadius: 2,
  borderColor: '#7e7e7e',
  elevation: 3,
  },
  container2: {
    backgroundColor: '#fff',
  },
  container1: {
    padding: 10,
  backgroundColor: '#fff',
  flexDirection: 'row'
  },
  images: {
    width: 150,
  height: 150,
  borderColor: 'black',
  borderWidth: 1,
  marginHorizontal: 3
  },
  btn: {
    backgroundColor: '#0080ff',
  height: 50,
  width: width - 60,
  alignItems: 'center',
  justifyContent: 'center',
  },
  ModalCont: {
    flex: 1,
  justifyContent: 'center',
  // alignItems: 'center',
  backgroundColor: '#00000099',
  paddingHorizontal: 10,
  },
  buttonText: {
    textAlign: 'center',
  fontSize: 15,
  color: '#000'
  },
  logo4: {
    width: 75,
  height: 75,
  marginLeft: 10,
  },
  picker: {
    color: 'F',
  marginTop: 10,
  backgroundColor: '#ffffff',
  flexDirection: 'row',
  borderRadius: 5,
  // marginHorizontal: 5,
  height: 30,
  width: '100%',
  shadowColor: "#333",
  shadowOffset: {
    width: 1,
  height: 1,
    },
  shadowOpacity: 0.3,
  shadowRadius: 2,

  elevation: 3,
  alignItems: 'center',
  justifyContent: 'center'
  },
  imgSmall: {
    position: 'absolute', flex: 1, alignItems: 'center', justifyContent: 'center'
  },
  title: {
    marginRight: 20,
  marginLeft: 20,
  marginTop: 15,
  marginBottom: 15,
  fontSize: 18,
  fontWeight: 'bold',
  color: 'white',

  },
  kotak2: {
    color: '#000000',
  marginTop: 10,
  marginLeft: 30,
  marginRight: 10,
  borderRadius: 2,
  borderWidth: 0.1,
  fontSize: 12,
  height: 52,
  backgroundColor: '#7e7e7',
  },
  tmbl: {
    justifyContent: 'center', alignItems: 'center', backgroundColor: '#0EBEDF', borderRadius: 10, fontSize: 12, width: 150, height: 60, marginTop: 10, fontWeight: 'bold', marginLeft:120,
  },
  tmbl1: {
    justifyContent: 'center', alignItems: 'center', backgroundColor: '#0EBEDF', borderRadius: 10, fontSize: 12, width: 150, height: 60, marginTop: 10, fontWeight: 'bold', paddingLeft: 50,
  },
  tmbl2: {
    shadowColor: "#333",
  shadowOffset: {
    width: 1,
  height: 1,
    },
  shadowOpacity: 0.3,
  shadowRadius: 2,
  elevation: 3,
  fontSize: 24,
  textAlign: 'center',
  justifyContent: 'center',
  alignItems: 'center',
  backgroundColor: '#0EBEDF',
  borderRadius: 10,
  fontSize: 12,
  width: 150,
  height: 60,
  marginTop: 10,
  marginLeft: 120,
  },
  tmbl3: {
    shadowColor: "#333",
  shadowOffset: {
    width: 1,
  height: 1,
    },
  shadowOpacity: 0.3,
  shadowRadius: 2,
  elevation: 3,
  fontSize: 24,
  textAlign: 'center',
  justifyContent: 'center',
  alignItems: 'center',
  backgroundColor: '#0EBEDF',
  borderRadius: 10,
  fontSize: 12,
  width: 150,
  height: 60,
  marginTop: 10,
  marginLeft: 120,
  paddingTop: 2,
  },
  Label: {
    padding: 5,
  color: '#000000',
  marginLeft: 10,
  marginTop: 20,
  },
  Label1: {
    padding: 5,
  color: '#000',
  alignItems: 'center',
  justifyContent: 'center'
  },
  Textinputcss: {
    color: '#7e7e7e',
  marginLeft: 30,
  marginRight: 10,
  borderRadius: 10,
  borderWidth: 1,
  fontSize: 12,
  height: 52,
  backgroundColor: '#fff',
  shadowColor: "#333",
  shadowOffset: {
    width: 1,
  height: 1,
    },
  shadowOpacity: 0.3,
  shadowRadius: 2,
  borderColor: '#7e7e7e',
  elevation: 3,
  },
  containerBtn: {
    borderRadius: 10,
  backgroundColor: '#fff',
  flex: 1,
  justifyContent: 'space-between',
  flexDirection: 'row',
  flexWrap: 'wrap',
  padding: 40,
  position: 'absolute',
  justifyContent: 'center', alignItems: 'center',
  bottom: 0,
  left: 0,
  right: 0,
  },

})



//flatlist

// <FlatList
//                     data={this.state.Kegiatan}
//                     keyExtractor={(item, index) => index.toString()}
//                     renderItem={({ item }) =>
//                  <Picker
//                          enabled={true}
//                         mode="dropdown"
//                           placeholder="Pilih Kegiatan"
//                       >
//                           {Kegiatan.map((item) => {
//                                return
//                                <Picker.Item
//                                  label={item.nama_kegiatan.toString()}
//                                     value={item.nama_kegiatan.toString()}
//                                     key={item.id_kegiatan.toString()} />
//                            })}
//                       </Picker>
//                   <Picker style={{ width: '80%', color: '#7e7e7e', fontWeight: 'bold', marginLeft: 30, borderRadius: 5, borderColor: '#000', }}>
//                          <Picker.Item label="Pilih Jenis Kegiatan" value="" />
//                         <Picker.Item Label={item.id_kegiatan, item.nama_kegiatan} value='' />
//                         </Picker>
//                         </FlatList>

                    //     const openCamera =() =>{
                    //      const option = {
                    //     mediaType:'photo',
                    //      quality:1
                    //      }
                    //   ImagePicker.launchCamera(option,(res)=>{
                    //     if(res.didCancel){
                    //             console.log('user cancel')
                    //        }else if (res.errorCode){
                    //           console.log(res.errorMessage)
                    //         }else{
                    //            const data = res.assets
                    //          console.log(data)
                    //        }
                    //       })
                    //  }

                    // cleansingleImage(index) {
                    // let helperArray=this.state.image;
                    // helperArray.splice(index,1);
                    // this.setState({images:helperArray});
                    // }


